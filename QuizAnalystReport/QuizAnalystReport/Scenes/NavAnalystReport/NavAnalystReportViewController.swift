//
//  NavAnalystReportViewController.swift
//  QuizAnalystReport
//
//  Created by BUSSNQ TH on 26/1/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NavAnalystReportDisplayLogic: class
{
  func displaySomething(viewModel: NavAnalystReport.Something.ViewModel)
    func displayMonthly(viewModel: NavAnalystReport.MonthlyData.ViewModel)
    func displayWeekly(viewModel: NavAnalystReport.WeeklyData.ViewModel)
    func displayAnalystTalks(viewModel: NavAnalystReport.AnalystTalk.ViewModel)
}

class NavAnalystReportViewController: UIViewController, NavAnalystReportDisplayLogic {

    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var tableViewWeekly: UITableView!
    @IBOutlet weak var lbnameFunds: UILabel!
    @IBOutlet weak var lbdateFunds: UILabel!
    @IBOutlet weak var tableViewMonthly: UITableView!
    var interactor: NavAnalystReportBusinessLogic?
  var router: (NSObjectProtocol & NavAnalystReportRoutingLogic & NavAnalystReportDataPassing)?
    var analystReportMonthly: [AnalystReportMonthlyModel]?
    var analystTalkData: [AnalystTalksModel]?
      var analystReportWeekly: [AnalystReportWeeklyModel]?
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = NavAnalystReportInteractor()
    let presenter = NavAnalystReportPresenter()
    let router = NavAnalystReportRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    doSomething()
    fetchMonthlyData()
    fetchWeeklyData()
    fetchAnalystTalksData()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = NavAnalystReport.Something.Request()
    interactor?.doSomething(request: request)
   
  }
    func fetchMonthlyData() {
        let request = NavAnalystReport.MonthlyData.Request()
        interactor?.fetchMonthlyData(request:request)
    }
    func fetchWeeklyData() {
        let request = NavAnalystReport.WeeklyData.Request()
        interactor?.fetchWeeklyData(request:request)
    }
    func fetchAnalystTalksData() {
        let request = NavAnalystReport.AnalystTalk.Request()
        interactor?.fetchAnalystTalksData(request:request)
    }
  
  func displaySomething(viewModel: NavAnalystReport.Something.ViewModel) {
    //nameTextField.text = viewModel.name
//    self.lbname.text = viewModel.analystReportData?.HeadlineTh ?? ""
    self.lbnameFunds.text = viewModel.analystReportData?.HeadlineTh ?? ""
    self.lbdateFunds.text = viewModel.analystReportData?.lastUpdate ?? ""
    print("IPO >>>", viewModel.analystReportData)
  }
    func displayMonthly(viewModel: NavAnalystReport.MonthlyData.ViewModel) {
        
        self.analystReportMonthly = viewModel.analystReportMonthlyData
     print  ("Monthly>>>", self.analystReportMonthly ?? "")
        self.tableViewMonthly.reloadData()
    }
    func displayWeekly(viewModel: NavAnalystReport.WeeklyData.ViewModel){
        self.analystReportWeekly = viewModel.analystReportWeeklyData
        print("Weekly >>>", self.analystReportWeekly ?? "")
        self.tableViewWeekly.reloadData()
    }
    func displayAnalystTalks(viewModel: NavAnalystReport.AnalystTalk.ViewModel) {
        self.analystTalkData = viewModel.analystTalkData
        print("AnalystTalks >>", self.analystTalkData ?? "")
        self.collectionView.reloadData()
    }
}
extension NavAnalystReportViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.analystTalkData?.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "AnalystTalksViewCell", for: indexPath) as! AnalystTalksViewCell
        cell.data = self.analystTalkData?[indexPath.row]
        return cell
    }
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        return CGSize(width: 160.0, height: 145.0)
    }
    
}
extension NavAnalystReportViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if tableView == tableViewWeekly{
            return self.analystReportWeekly?.count ?? 0
        }else {
            return self.analystReportMonthly?.count ?? 0
    }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if tableView == tableViewWeekly {
            let cell = tableViewWeekly.dequeueReusableCell(withIdentifier: "WeeklyViewCell") as! WeeklyViewCell
                       cell.data = self.analystReportWeekly?[indexPath.row]
                       return cell
        }else {
           
            let cellMonthly = tableViewMonthly.dequeueReusableCell(withIdentifier: "MonthlyViewCell") as! MonthlyViewCell
            cellMonthly.data = self.analystReportMonthly?[indexPath.row]
            return cellMonthly
        }
    }
    
    
    
}
