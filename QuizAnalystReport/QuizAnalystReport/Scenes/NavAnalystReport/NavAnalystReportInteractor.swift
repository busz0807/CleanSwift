//
//  NavAnalystReportInteractor.swift
//  QuizAnalystReport
//
//  Created by BUSSNQ TH on 26/1/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NavAnalystReportBusinessLogic
{
  func doSomething(request: NavAnalystReport.Something.Request)
    func fetchMonthlyData(request: NavAnalystReport.MonthlyData.Request)
    func fetchWeeklyData(request: NavAnalystReport.WeeklyData.Request)
    func fetchAnalystTalksData(request: NavAnalystReport.AnalystTalk.Request)
}

protocol NavAnalystReportDataStore
{
  var analystReport: AnalystReportModel? { get set }
    var analystReportMonthly : AnalystReportMonthlyModel? { get set}
    var analystReportWeekly : AnalystReportWeeklyModel? { get set}
    var analystTalkData: AnalystTalksModel? {get set}
}

class NavAnalystReportInteractor: NavAnalystReportBusinessLogic, NavAnalystReportDataStore {
    var analystTalkData: AnalystTalksModel?
    var analystReportMonthly: AnalystReportMonthlyModel?
    var analystReportWeekly: AnalystReportWeeklyModel?
    var analystReport: AnalystReportModel?
    
  var presenter: NavAnalystReportPresentationLogic?
  var worker: NavAnalystReportWorker?
  //var name: String = ""
  
  // MARK: Do something
  
  func doSomething(request: NavAnalystReport.Something.Request)
  {
    worker = NavAnalystReportWorker()
    worker?.doSomeWork()
    
    let response = NavAnalystReport.Something.Response(analystReportData: analystReport)
    presenter?.presentSomething(response: response)
  }
    func fetchMonthlyData(request: NavAnalystReport.MonthlyData.Request) {
        worker = NavAnalystReportWorker()
        worker?.fetchDataMonthly() { (analystReportMonthly, error) in
            if error != nil {
                let response = NavAnalystReport.MonthlyData.Response(analystReportMonthlyData: nil, error: error)
                self.presenter?.presentMonthly(response: response)
                return
            }
            let response = NavAnalystReport.MonthlyData.Response(analystReportMonthlyData: analystReportMonthly, error: nil)
            self.presenter?.presentMonthly(response: response)
        }
}

func fetchWeeklyData(request: NavAnalystReport.WeeklyData.Request) {
    worker = NavAnalystReportWorker()
    worker?.fetchDataWeekly() { (analystReportWeekly, error) in
        if error != nil {
            let response = NavAnalystReport.WeeklyData.Response(analystReportWeeklyData: nil, error: error)
            self.presenter?.presentWeekly(response: response)
            return
        }
        let response = NavAnalystReport.WeeklyData.Response(analystReportWeeklyData: analystReportWeekly, error: nil)
        self.presenter?.presentWeekly(response: response)
    }
    }
    func fetchAnalystTalksData(request: NavAnalystReport.AnalystTalk.Request){
        worker = NavAnalystReportWorker()
        worker?.fetchDataAnalystTalks() { (analystTalkData, error) in
            if error != nil {
                let response = NavAnalystReport.AnalystTalk.Response(analystTalkData: nil, error: error)
                self.presenter?.presentAnalystTalks(response: response)
                return
            }
            let response = NavAnalystReport.AnalystTalk.Response(analystTalkData: analystTalkData, error: nil)
            self.presenter?.presentAnalystTalks(response: response)
        }
    }
    
}

