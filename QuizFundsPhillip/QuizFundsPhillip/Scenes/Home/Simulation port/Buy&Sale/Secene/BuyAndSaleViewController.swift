//
//  BuyAndSaleViewController.swift
//  QuizFundsPhillip
//
//  Created by BUSSNQ TH on 15/3/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift
protocol BuyAndSaleDisplayLogic: class
{
    func displayFetchData(viewModel: BuyAndSale.FetchData.ViewModel)
}

class BuyAndSaleViewController: UIViewController, BuyAndSaleDisplayLogic {
    @available(iOS 14.0, *)
    @IBAction func btnChangeColorstar(_ sender: Any) {

        if self.setbtnstar.tintColor?.accessibilityName == "white" {
            let image = UIImage(named: "star")
            let tintImage = image?.withRenderingMode(.alwaysTemplate)
            setbtnstar.setImage(tintImage, for: .normal)
            setbtnstar.tintColor = .systemYellow
         
        } else if self.setbtnstar.tintColor?.accessibilityName == "vibrant yellow" {
            self.setbtnstar.tintColor = .white
            let image = UIImage(named: "unstar")
            let tintImage = image?.withRenderingMode(.alwaysTemplate)
            setbtnstar.setImage(tintImage, for: .normal)
            self.setbtnstar.tintColor = .white
        }
    }
    @IBAction func btnback(_ sender: Any) {
        router?.backtoPagePreview()
    }
    @IBAction func btngoToRisk(_ sender: Any) {
        router?.sendDatagoToRiskPreview(risk: self.risk)
    }
    @IBAction func btngotoDelete(_ sender: Any) {
        router?.sendDatagoToDeletePreview(fundsId: self.fcode, portNo: self.portNo )
    }
    @IBAction func btngoToHistory(_ sender: Any) {
        router?.sendDatagoToHistoryPreview(fundsId: self.fcode, portNo: self.portNo)
    }
    @IBAction func btnbuyplus(_ sender: Any) {
        router?.sendDatagoToAddPortPreview(mainPage: self.mainPage, enName: self.enName, thName: self.thName, risk: self.risk, nav: self.nav, chage: self.chage, buy: self.buy, sell: self.sell, date: self.datenav, portNo: self.portNo,assetCompany: self.assetCompany,investOpenDate: self.investOpenDate,  getOrderList: self.getOrderList)

    }
    @IBAction func btnsellfunds(_ sender: Any) {
        router?.sendDatagoToSellPortPreview(mainPage: self.mainPage, enName: self.enName, thName: self.thName, risk: self.risk, nav: self.nav, chage: self.chage, buy: self.buy, sell: self.sell, date: self.datenav, portNo: self.portNo,assetCompany: self.assetCompany,investOpenDate: self.investOpenDate,  getOrderList: self.getOrderList)
    }
    @IBOutlet weak var lbcost: UILabel!
    @IBOutlet weak var unreallizelabel: UILabel!
    @IBOutlet weak var numUnrealizeLabel: UILabel!
    @IBOutlet weak var navlabel: UILabel!
    @IBOutlet weak var amountlabel: UILabel!
    @IBOutlet weak var lbamount: UILabel!
    @IBOutlet weak var labelvalue: UILabel!
    @IBOutlet weak var lbvalue: UILabel!
    @IBOutlet weak var valuelabel: UILabel!
    @IBOutlet weak var lbenName: UILabel!
    @IBOutlet weak var settingbtnrisk: UIButton!
    @IBOutlet weak var lbbuy: UILabel!
    @IBOutlet weak var lbsell: UILabel!
    @IBOutlet weak var lbchange: UILabel!
    @IBOutlet weak var setbtnstar: UIButton!
    @IBOutlet weak var lbnav: UILabel!
    @IBOutlet weak var lbthName: UILabel!
    @IBOutlet weak var setviewfund: UIView!
    @IBOutlet weak var setviewbuy: UIView!
    @IBOutlet weak var setviewsell: UIView!
    @IBOutlet weak var setviewbuy1: UIView!
    @IBOutlet weak var setviewsell1: UIView!
    @IBOutlet weak var setview1m: UIView!
    @IBOutlet weak var setview3m: UIView!
    @IBOutlet weak var setview6m: UIView!
    @IBOutlet weak var setview1y: UIView!
    @IBOutlet weak var setview3y: UIView!
    @IBOutlet weak var setview5y: UIView!
    @IBOutlet weak var setbtn1m: UIButton!
    @IBOutlet weak var setbtn3m: UIButton!
    @IBOutlet weak var setbtn6m: UIButton!
    @IBOutlet weak var setbtn1y: UIButton!
    @IBOutlet weak var setbtn3y: UIButton!
    @IBOutlet weak var setbtn5y: UIButton!
    @available(iOS 14.0, *)
    @IBAction func btbActionValue(_ sender: Any) {
      
        if  self.lbvalue.textColor.accessibilityName == "green" {
            self.lbcost.textColor = .red
            self.lbvalue.textColor = .red
            self.lbcost.text = " - 1,175.74"
            self.lbvalue.text = " -8.84%"
            self.lbcost.font = UIFont.systemFont(ofSize: 15)
            self.lbvalue.font = UIFont.systemFont(ofSize: 15)
            self.setviewfund.backgroundColor = .systemGray5
        }
      
        else if self.lbvalue.textColor.accessibilityName == "dark red" {
            self.lbcost.textColor = .green
            self.lbvalue.textColor = .green
            self.lbcost.font = UIFont.boldSystemFont(ofSize: 16.0)
            self.lbvalue.font = UIFont.boldSystemFont(ofSize: 16.0)
            self.setviewfund.backgroundColor = .systemGroupedBackground
        }else if  self.lbvalue.textColor.accessibilityName == "vibrant green" {
            self.lbcost.textColor = .red
            self.lbvalue.textColor = .red
            self.lbcost.font = UIFont.systemFont(ofSize: 15)
            self.lbvalue.font = UIFont.systemFont(ofSize: 15)
            self.setviewfund.backgroundColor = .systemGray5
        }
        print("",self.lbvalue.textColor.accessibilityName)
        
    }
    @IBAction func setbtn1m(_ sender: Any) {
        self.setview1m.clipsToBounds = true
        self.setview1m.layer.cornerRadius = 15
        self.setview1m.layer.shadowRadius = 50
        self.setview1m.layer.masksToBounds = false
        self.setview1m.backgroundColor = #colorLiteral(red: 0.4745098054, green: 0.8392156959, blue: 0.9764705896, alpha: 1)
        self.setbtn1m.setTitleColor(.systemBlue, for: .normal)
        self.setbtn3m.setTitleColor(.darkGray, for: .normal)
        self.setbtn6m.setTitleColor(.darkGray, for: .normal)
        self.setbtn1y.setTitleColor(.darkGray, for: .normal)
        self.setbtn3y.setTitleColor(.darkGray, for: .normal)
        self.setbtn5y.setTitleColor(.darkGray, for: .normal)
        self.setview3m.backgroundColor = .white
        self.setview6m.backgroundColor = .white
        self.setview1y.backgroundColor = .white
        self.setview3y.backgroundColor = .white
        self.setview5y.backgroundColor = .white
    }
    @IBAction func setbtn3m(_ sender: Any) {
        self.setview3m.clipsToBounds = true
        self.setview3m.layer.cornerRadius = 15
        self.setbtn3m.setTitleColor(.darkGray, for: .normal)
        self.setview3m.layer.shadowRadius = 50
        self.setview3m.layer.masksToBounds = false
        self.setview3m.backgroundColor = #colorLiteral(red: 0.4745098054, green: 0.8392156959, blue: 0.9764705896, alpha: 1)
        self.setbtn3m.setTitleColor(.systemBlue, for: .normal)
        self.setbtn1m.setTitleColor(.darkGray, for: .normal)
        self.setbtn6m.setTitleColor(.darkGray, for: .normal)
        self.setbtn1y.setTitleColor(.darkGray, for: .normal)
        self.setbtn3y.setTitleColor(.darkGray, for: .normal)
        self.setbtn5y.setTitleColor(.darkGray, for: .normal)
        self.setview1m.backgroundColor = .white
        self.setview6m.backgroundColor = .white
        self.setview1y.backgroundColor = .white
        self.setview3y.backgroundColor = .white
        self.setview5y.backgroundColor = .white
    }
    @IBAction func setbtn6m(_ sender: Any) {
        self.setview6m.clipsToBounds = true
        self.setview6m.layer.cornerRadius = 15
        self.setview6m.layer.shadowRadius = 50
        self.setview6m.layer.masksToBounds = false
        self.setview6m.backgroundColor = #colorLiteral(red: 0.4745098054, green: 0.8392156959, blue: 0.9764705896, alpha: 1)
        self.setbtn1m.setTitleColor(.darkGray, for: .normal)
        self.setbtn6m.setTitleColor(.systemBlue, for: .normal)
        self.setbtn3m.setTitleColor(.darkGray, for: .normal)
        self.setbtn1m.setTitleColor(.darkGray, for: .normal)
        self.setbtn1y.setTitleColor(.darkGray, for: .normal)
        self.setbtn3y.setTitleColor(.darkGray, for: .normal)
        self.setbtn5y.setTitleColor(.darkGray, for: .normal)
        self.setview3m.backgroundColor = .white
        self.setview1m.backgroundColor = .white
        self.setview1y.backgroundColor = .white
        self.setview3y.backgroundColor = .white
        self.setview5y.backgroundColor = .white
        
    }
    @IBAction func setbtn1y(_ sender: Any) {
        self.setview1y.clipsToBounds = true
        self.setview1y.layer.cornerRadius = 15
        self.setview1y.layer.shadowRadius = 50
        self.setview1y.layer.masksToBounds = false
        self.setview1y.backgroundColor = #colorLiteral(red: 0.4745098054, green: 0.8392156959, blue: 0.9764705896, alpha: 1)
        self.setbtn1y.setTitleColor(.systemBlue, for: .normal)
        self.setbtn3m.setTitleColor(.darkGray, for: .normal)
        self.setbtn6m.setTitleColor(.darkGray, for: .normal)
        self.setbtn1m.setTitleColor(.darkGray, for: .normal)
        self.setbtn3y.setTitleColor(.darkGray, for: .normal)
        self.setbtn5y.setTitleColor(.darkGray, for: .normal)
        self.setview3m.backgroundColor = .white
        self.setview6m.backgroundColor = .white
        self.setview1m.backgroundColor = .white
        self.setview3y.backgroundColor = .white
        self.setview5y.backgroundColor = .white
    }
    @IBAction func setbtn3y(_ sender: Any) {
        self.setview3y.clipsToBounds = true
        self.setview3y.layer.cornerRadius = 15
        self.setview3y.layer.shadowRadius = 50
        self.setview3y.layer.masksToBounds = false
        self.setview3y.backgroundColor = #colorLiteral(red: 0.4745098054, green: 0.8392156959, blue: 0.9764705896, alpha: 1)
        self.setbtn3y.setTitleColor(.systemBlue, for: .normal)
        self.setbtn3m.setTitleColor(.darkGray, for: .normal)
        self.setbtn6m.setTitleColor(.darkGray, for: .normal)
        self.setbtn1y.setTitleColor(.darkGray, for: .normal)
        self.setbtn1m.setTitleColor(.darkGray, for: .normal)
        self.setbtn5y.setTitleColor(.darkGray, for: .normal)
        self.setview3m.backgroundColor = .white
        self.setview6m.backgroundColor = .white
        self.setview1y.backgroundColor = .white
        self.setview1m.backgroundColor = .white
        self.setview5y.backgroundColor = .white
    }
    @IBAction func setbtn5y(_ sender: Any) {
        self.setview5y.clipsToBounds = true
        self.setview5y.layer.cornerRadius = 15
        self.setview5y.layer.shadowRadius = 50
        self.setview5y.layer.masksToBounds = false
        self.setview5y.backgroundColor = #colorLiteral(red: 0.4745098054, green: 0.8392156959, blue: 0.9764705896, alpha: 1)
        self.setbtn5y.setTitleColor(.systemBlue, for: .normal)
        self.setbtn3m.setTitleColor(.darkGray, for: .normal)
        self.setbtn6m.setTitleColor(.darkGray, for: .normal)
        self.setbtn1y.setTitleColor(.darkGray, for: .normal)
        self.setbtn3y.setTitleColor(.darkGray, for: .normal)
        self.setbtn1m.setTitleColor(.darkGray, for: .normal)
        self.setview3m.backgroundColor = .white
        self.setview6m.backgroundColor = .white
        self.setview1y.backgroundColor = .white
        self.setview3y.backgroundColor = .white
        self.setview1m.backgroundColor = .white
    }
    var risk = 0
    var fcode = ""
    var portNo = 0
    var fundslist: [ReealmFundsListMobile]?
    var mainPage = "BuyandSellPage"
    var interactor: BuyAndSaleBusinessLogic?
    var enName = ""
    var thName = ""
    var nav = ""
    var chage = ""
    var buy = ""
    var sell = ""
    var datenav = ""
    var assetCompany = ""
    var investOpenDate = ""
    var getOrderList: DataGetOrder?
  var router: (NSObjectProtocol & BuyAndSaleRoutingLogic & BuyAndSaleDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = BuyAndSaleInteractor()
    let presenter = BuyAndSalePresenter()
    let router = BuyAndSaleRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        doFetchData()
        self.lbcost.font = UIFont.boldSystemFont(ofSize: 16.0)
        self.lbvalue.font = UIFont.boldSystemFont(ofSize: 16.0)
        self.setviewbuy.clipsToBounds = true
        self.setviewbuy.layer.cornerRadius = 5
        self.setviewbuy.layer.shadowColor = UIColor.systemGray.cgColor
        self.setviewbuy.layer.shadowOpacity = 0.5
        self.setviewbuy.layer.shadowRadius = 6
        self.setviewbuy.layer.masksToBounds = false
    
        self.setviewsell.clipsToBounds = true
        self.setviewsell.layer.cornerRadius = 5
        self.setviewsell.layer.shadowColor = UIColor.systemGray.cgColor
        self.setviewsell.layer.shadowOpacity = 0.5
        self.setviewsell.layer.shadowRadius = 6
        self.setviewsell.layer.masksToBounds = false

        self.setviewbuy1.clipsToBounds = true
        self.setviewbuy1.layer.cornerRadius = 5
        self.setviewbuy1.layer.shadowColor = UIColor.systemGray.cgColor
        self.setviewbuy1.layer.shadowOpacity = 0.5
        self.setviewbuy1.layer.shadowRadius = 6
        self.setviewbuy1.layer.masksToBounds = false

        self.setviewsell1.clipsToBounds = true
        self.setviewsell1.layer.cornerRadius = 5
        self.setviewsell1.layer.shadowColor = UIColor.systemGray.cgColor
        self.setviewsell1.layer.shadowOpacity = 0.5
        self.setviewsell1.layer.shadowRadius = 6
        self.setviewsell1.layer.masksToBounds = false

        self.setviewfund.clipsToBounds = true
        self.setviewfund.layer.cornerRadius = 5
        self.setviewfund.layer.shadowColor = UIColor.systemGray.cgColor
        self.setviewfund.layer.shadowOpacity = 0.5
        self.setviewfund.layer.shadowRadius = 6
        self.setviewfund.layer.masksToBounds = false

        self.setview1m.clipsToBounds = true
        self.setview1m.layer.cornerRadius = 15
        //    self.setView.layer.shadowOpacity = 0.3
        self.setview1m.layer.shadowRadius = 50
        self.setview1m.layer.masksToBounds = false
        self.setview1m.backgroundColor = #colorLiteral(red: 0.4745098054, green: 0.8392156959, blue: 0.9764705896, alpha: 1)
    
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
    
    func doFetchData()
    {
      let request = BuyAndSale.FetchData.Request()
      interactor?.doFetchData(request: request)
    }
    
  
    func displayFetchData(viewModel: BuyAndSale.FetchData.ViewModel)  {
        print("portNo>>", viewModel.portNo ?? 0)
        
        self.fundslist = viewModel.fundsList
        self.fcode = viewModel.getOrderList?.fcode ?? ""
        self.portNo = Int(viewModel.portNo ?? 0)
//        print("fcode>>", viewModel.getOrderList?.fcode ?? "" )
        self.getOrderList = viewModel.getOrderList
        self.amountlabel.text = "\(viewModel.getOrderList?.principal ?? 0)"
        self.valuelabel.text = "\(viewModel.getOrderList?.realizedProfit ?? 0)"
        self.navlabel.text = " \(viewModel.getOrderList?.averageCost ?? 0)"
        self.labelvalue.text = "\(viewModel.getOrderList?.currentValue ?? 0)"
        self.lbcost.text = " \(viewModel.getOrderList?.unrealizedReturns ?? 0)"
        print("value", viewModel.getOrderList?.unrealizedProfits ?? 0)
        if viewModel.getOrderList?.unrealizedProfits ?? 0 <  0 {
            self.lbvalue.text = " \(viewModel.getOrderList?.unrealizedProfits ?? 0)"
            self.unreallizelabel.text = " \(viewModel.getOrderList?.unrealizedProfits ?? 0)"
            self.lbvalue.textColor = .red
            self.unreallizelabel.textColor = .red
        }
        self.lbamount.text = " \(viewModel.getOrderList?.availableUnits ?? 0)"
        let realizedProfit = Double(viewModel.getOrderList?.realizedProfit ?? 0)
        let unrealizedProfits = Double(viewModel.getOrderList?.unrealizedProfits ?? 0)
        print("realizedProfit", realizedProfit)
        print("unrealizedProfits", unrealizedProfits)
        let num = realizedProfit + unrealizedProfits
        print("num", num)
        if num <  0 {
            self.numUnrealizeLabel.text = "\(num)"
            self.numUnrealizeLabel.textColor = .red
         
        }
        self.numUnrealizeLabel.text = "\(num)"
        let count = Int(viewModel.fundsList?.count ?? 0)  - 1
        for countindex in 0...count {
            if viewModel.fundsList?[countindex].fundId == viewModel.getOrderList?.fcode {
                self.lbenName.text  = viewModel.fundsList?[countindex].enName ?? ""
                self.lbthName.text =  viewModel.fundsList?[countindex].thName  ?? ""
                self.enName  = viewModel.fundsList?[countindex].enName ?? ""
                self.thName  = viewModel.fundsList?[countindex].thName  ?? ""
                print("funds",viewModel.fundsList?[countindex].code  ?? "")
                self.risk =  viewModel.fundsList?[countindex].risk ?? 0
                print("assetCompany",viewModel.fundsList?[countindex].assetCompany ?? "")
                print("opendate",viewModel.fundsList?[countindex].investOpenDate ?? "")
                self.investOpenDate = viewModel.fundsList?[countindex].investOpenDate ?? ""
                self.assetCompany = viewModel.fundsList?[countindex].assetCompany ?? ""
                let risk = viewModel.fundsList?[countindex].risk ?? 0
                if risk == 1 {
                    self.settingbtnrisk.setImage(UIImage(named: "111"), for: .normal)
                } else if risk == 2 {
                    self.settingbtnrisk.setImage(UIImage(named: "222"), for: .normal)
                } else if risk == 3 {
                    self.settingbtnrisk.setImage(UIImage(named: "333"), for: .normal)
                } else if risk == 4 {
                    self.settingbtnrisk.setImage(UIImage(named: "444"), for: .normal)
                } else if risk == 5 {
                    self.settingbtnrisk.setImage(UIImage(named: "555"), for: .normal)
                } else if risk == 6 {
                    self.settingbtnrisk.setImage(UIImage(named: "666"), for: .normal)
                } else if risk == 7 {
                    self.settingbtnrisk.setImage(UIImage(named: "777"), for: .normal)
                } else  {
                    self.settingbtnrisk.setImage(UIImage(named: "888"), for: .normal)
                }
             let fundscode = viewModel.fundsList?[countindex].code  ?? ""
                let realm = try! Realm()
                let result = realm.objects(NavListDb.self)
                let navlist = Array(result)
                let countnav =  Int(navlist.count) - 1
                for countindexnav in 0...countnav {
                    let fundscodenav = navlist[countindexnav].fundCode
                    if fundscodenav  == fundscode {
                        self.lbbuy.text = "\(navlist[countindexnav].buy)"
                        self.lbsell.text = "\(navlist[countindexnav].sell)"
                        self.lbnav.text = "\(navlist[countindexnav].nav)"
                        let dateString = navlist[countindexnav].date
        //                print("date", dateString)
                        let dateFormatter = DateFormatter()
                        dateFormatter.locale = Locale(identifier: "en_US_POSIX")
                        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
                        let date = dateFormatter.date(from: "\(dateString)")!
                    
                        let dateFormatterString = DateFormatter()
                        dateFormatterString.dateFormat = "dd/MM/yyyy"
                        let formattedDate1 = dateFormatterString.string(from: date)
                        self.datenav = formattedDate1
                        print("datenav", self.datenav)
                        self.sell = "\(navlist[countindexnav].sell)"
                        self.nav = "\(navlist[countindexnav].nav)"
                        self.buy = "\(navlist[countindexnav].buy)"
                        
                        let change = navlist[countindexnav].change
                        if change < 0 {
                        self.lbchange.text = "\(navlist[countindexnav].change)(\(navlist[countindexnav].changePercent)%)"
                        self.lbchange.textColor = .red
                            self.chage = "\(navlist[countindexnav].change)(\(navlist[countindexnav].changePercent)%)"
                        } else {
                            self.lbchange.text = "+\(navlist[countindexnav].change)(+\(navlist[countindexnav].changePercent)%)"
                            self.chage = "+\(navlist[countindexnav].change)(+\(navlist[countindexnav].changePercent)%)"
                            self.lbchange.textColor = .green
                        }
                    }
                }
            }
        }
  }
}
 
