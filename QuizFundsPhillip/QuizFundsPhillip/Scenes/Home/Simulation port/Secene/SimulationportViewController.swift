//
//  SimulationportViewController.swift
//  QuizFundsPhillip
//
//  Created by BUSSNQ TH on 9/3/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CenteredCollectionView
import RealmSwift
enum NotificationCenterPortDetailPage: String {
    case Clicked
}
enum NotificationCenterFundSale: String {
    case Clicked
}
enum NotificationCenterAddSimulationPort: String {
    case Clicked
}
protocol SimulationportDisplayLogic: class
{

      func displayFecthGetOrderData(viewModel: Simulationport.GetOrder.ViewModel)
      func displayFecthGetOrderData2(viewModel: Simulationport.GetOrder2.ViewModel)
      func displayFecthGetOrderData3(viewModel: Simulationport.GetOrder3.ViewModel)
      func displayFecthGetOrderData4(viewModel: Simulationport.GetOrder4.ViewModel)
      func displayFecthGetOrderData5(viewModel: Simulationport.GetOrder5.ViewModel)
}

class SimulationportViewController: UIViewController, SimulationportDisplayLogic
{
    @IBAction func btnback(_ sender: Any) {
        router?.backtoMainPagePreview()
    }
  
    let cellPercentWidth: CGFloat = 1.0
    var centeredCollectionViewFlowLayout: CenteredCollectionViewFlowLayout!
    var mainpage = "Simulationport"
    var getOrderData: GetOrderModel?
    var getOrderData2: GetOrderModel?
    var getOrderData3: GetOrderModel?
    var getOrderData4: GetOrderModel?
    var getOrderData5: GetOrderModel?
  
    var sumValue: String?
    var sumunrealizedReturns: String?
    var sumunrealizedProfits: String?
    var principal: String?
    var realizedProfit: String?
    var sumValue2: String?
    var sumunrealizedReturns2: String?
    var sumunrealizedProfits2: String?
    var principal2: String?
    var realizedProfit2: String?
    var sumValue3: String?
    var sumunrealizedReturns3: String?
    var sumunrealizedProfits3: String?
    var principal3: String?
    var realizedProfit3: String?
    var sumValue4: String?
    var sumunrealizedReturns4: String?
    var sumunrealizedProfits4: String?
    var principal4: String?
    var realizedProfit4: String?
    var sumValue5: String?
    var sumunrealizedReturns5: String?
    var sumunrealizedProfits5: String?
    var principal5: String?
    var realizedProfit5: String?
    var indexcollectioncenterred: Int?
    @IBAction func btngoToFunds(_ sender: Any) {
        print("mainpage", mainpage)
        
        let index = Int(self.indexcollectioncenterred ?? 0) + 1
        print("index", index )
        router?.goToSearchFundsPreview(mainpage: self.mainpage, portNo: index)
    }
    @IBOutlet weak var pageControl: UIPageControl!
    @IBOutlet weak var viewtableview: UIView!
    @IBOutlet weak var lbtotalfunds: UILabel!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var setviewFunds: UIView!
    @IBOutlet weak var collectionView: UICollectionView!
    var interactor: SimulationportBusinessLogic?
  var router: (NSObjectProtocol & SimulationportRoutingLogic & SimulationportDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SimulationportInteractor()
    let presenter = SimulationportPresenter()
    let router = SimulationportRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    // MARK:NotificationCenter
    sendclickPortDetail()
    sendclickFundSale()
    sendclickAddSimulationPort()
   
    // MARK:get Data APi
    doFecthGetOrderData()
    doFecthGetOrderData2()
    doFecthGetOrderData3()
    doFecthGetOrderData4()
    doFecthGetOrderData5()

    self.setviewFunds.clipsToBounds = true
    self.setviewFunds.layer.cornerRadius = 30
//    self.setView.layer.shadowOpacity = 0.3
    self.setviewFunds.layer.shadowRadius = 50
    self.setviewFunds.layer.masksToBounds = false
    self.viewtableview.clipsToBounds = true
    self.viewtableview.layer.cornerRadius = 15
//    self.setView.layer.shadowOpacity = 0.3
    self.viewtableview.layer.shadowRadius = 10
    self.viewtableview.layer.masksToBounds = false
   
    configurePageControl()
//    pageControl.currentPage = 5
    pageControl.numberOfPages = 5

    // Get the reference to the CenteredCollectionViewFlowLayout (REQURED)
    
     collectionView.collectionViewLayout = CenteredCollectionViewFlowLayout()
     // Get the reference to the CenteredCollectionViewFlowLayout (REQURED)
     centeredCollectionViewFlowLayout = collectionView.collectionViewLayout as? CenteredCollectionViewFlowLayout
    // Modify the collectionView's decelerationRate (REQURED)
    collectionView.decelerationRate = UIScrollView.DecelerationRate.fast
    centeredCollectionViewFlowLayout?.itemSize = CGSize(
        width: 390 * cellPercentWidth,
        height: 180 * cellPercentWidth * cellPercentWidth
    )
    centeredCollectionViewFlowLayout.minimumLineSpacing = 50
    
  }
    func configurePageControl() {
        // The total number of pages that are available is based on how many available colors we have.
        self.pageControl.numberOfPages = 1
        self.pageControl.currentPage = 1
        self.pageControl.tintColor = UIColor.red
        self.pageControl.pageIndicatorTintColor = UIColor.darkGray
        self.pageControl.currentPageIndicatorTintColor = UIColor.white
    }
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
    func doFecthGetOrderData() {
    let request = Simulationport.GetOrder.Request(username: "bookling01", portNo: 1)
    interactor?.doFecthGetOrderData(request: request)
  }
    func doFecthGetOrderData2() {
    let request = Simulationport.GetOrder2.Request(username: "bookling01", portNo: 2)
    interactor?.doFecthGetOrderData2(request: request)
  }
    func doFecthGetOrderData3() {
    let request = Simulationport.GetOrder3.Request(username: "bookling01", portNo: 3)
    interactor?.doFecthGetOrderData3(request: request)
  }
    func doFecthGetOrderData4() {
    let request = Simulationport.GetOrder4.Request(username: "bookling01", portNo: 4)
    interactor?.doFecthGetOrderData4(request: request)
  }
    func doFecthGetOrderData5() {
    let request = Simulationport.GetOrder5.Request(username: "bookling01", portNo: 5)
    interactor?.doFecthGetOrderData5(request: request)
  }
    func displayFecthGetOrderData(viewModel: Simulationport.GetOrder.ViewModel) {
//        print("GetOrder", viewModel.getOrderDate)
//        print("err", viewModel.error)
        let data = viewModel.getOrderDate
        self.getOrderData = data
        print("count",   self.getOrderData?.Data.count ?? 0)
        let count = Int(self.getOrderData?.Data.count ?? 0) - 1
        print("count", count )
//        for countindex in 0...count {
//            let unrealizedReturns1 = Double(self.getOrderData?.Data[countindex].currentValue ?? 0.0)
//            print("unrealizedReturns1", unrealizedReturns1)
        self.sumunrealizedProfits =  String(self.getOrderData?.Data.reduce(0) { $0 + $1.unrealizedProfits } ?? 0.00)
        self.sumValue =  String(self.getOrderData?.Data.reduce(0) { $0 + $1.currentValue } ?? 0.00)
        self.sumunrealizedReturns = String(self.getOrderData?.Data.reduce(0) { $0 + $1.unrealizedReturns } ?? 0.00)
        self.principal = String(self.getOrderData?.Data.reduce(0) { $0 + $1.principal } ?? 0.00)
        self.realizedProfit = String(self.getOrderData?.Data.reduce(0) { $0 + $1.realizedProfit } ?? 0.00)
        self.tableView.reloadData()
        self.collectionView.reloadData()
    }
    func displayFecthGetOrderData2(viewModel: Simulationport.GetOrder2.ViewModel){
//        print("GetOrder2", viewModel.getOrderDate2)
//        print("err2", viewModel.error)
        self.getOrderData2 = viewModel.getOrderDate2
        self.sumunrealizedProfits2 =  String(self.getOrderData2?.Data.reduce(0) { $0 + $1.unrealizedProfits } ?? 0.00)
        self.sumValue2 =  String(self.getOrderData2?.Data.reduce(0) { $0 + $1.currentValue } ?? 0.00)
        self.sumunrealizedReturns2 = String(self.getOrderData2?.Data.reduce(0) { $0 + $1.unrealizedReturns } ?? 0.00)
        self.principal2 = String(self.getOrderData2?.Data.reduce(0) { $0 + $1.principal } ?? 0.00)
        self.realizedProfit2 = String(self.getOrderData2?.Data.reduce(0) { $0 + $1.realizedProfit } ?? 0.00)
        self.tableView.reloadData()
        self.collectionView.reloadData()
    }
    func displayFecthGetOrderData3(viewModel: Simulationport.GetOrder3.ViewModel) {
//        print("GetOrder3", viewModel.getOrderDate3)
//        print("err3", viewModel.error)
        self.getOrderData3 = viewModel.getOrderDate3
        self.sumunrealizedProfits3 = String(self.getOrderData3?.Data.reduce(0) { $0 + $1.unrealizedProfits } ?? 0.00)
        self.sumValue3 =  String(self.getOrderData3?.Data.reduce(0) { $0 + $1.currentValue } ?? 0.00)
        self.sumunrealizedReturns3 = String(self.getOrderData3?.Data.reduce(0) { $0 + $1.unrealizedReturns } ?? 0.00 )
        self.principal3 = String(self.getOrderData3?.Data.reduce(0) { $0 + $1.principal } ?? 0.00)
        self.realizedProfit3 = String(self.getOrderData3?.Data.reduce(0) { $0 + $1.realizedProfit } ?? 0.00)
        self.tableView.reloadData()
        self.collectionView.reloadData()

    }
    func displayFecthGetOrderData4(viewModel: Simulationport.GetOrder4.ViewModel){
//        print("GetOrder4", viewModel.getOrderDate4)
//        print("err4", viewModel.error)
        self.getOrderData4 = viewModel.getOrderDate4
        
        self.sumunrealizedProfits4 =  String(self.getOrderData4?.Data.reduce(0) { $0 + $1.unrealizedProfits } ?? 0.00)
        self.sumValue4 =  String(self.getOrderData4?.Data.reduce(0) { $0 + $1.currentValue } ?? 0.00)
        self.sumunrealizedReturns4 = String(self.getOrderData4?.Data.reduce(0) { $0 + $1.unrealizedReturns } ?? 0.00)
        self.principal4 = String(self.getOrderData4?.Data.reduce(0) { $0 + $1.principal } ?? 0.00)
        self.realizedProfit4 = String(self.getOrderData4?.Data.reduce(0) { $0 + $1.realizedProfit } ?? 0.00)
        self.tableView.reloadData()
        self.collectionView.reloadData()


    }
    func displayFecthGetOrderData5(viewModel: Simulationport.GetOrder5.ViewModel) {
//        print("GetOrder5", viewModel.getOrderDate5)
//        print("err5", viewModel.error)
        self.getOrderData5 = viewModel.getOrderDate5
        self.sumunrealizedProfits5 =  String(self.getOrderData5?.Data.reduce(0) { $0 + $1.unrealizedProfits } ?? 0.00)
        self.sumValue5 =  String(self.getOrderData5?.Data.reduce(0) { $0 + $1.currentValue } ?? 0.00)
        self.sumunrealizedReturns5 = String(self.getOrderData5?.Data.reduce(0) { $0 + $1.unrealizedReturns } ?? 0.00)
        self.principal5 = String(self.getOrderData5?.Data.reduce(0) { $0 + $1.principal } ?? 0.00)
        self.realizedProfit5 = String(self.getOrderData5?.Data.reduce(0) { $0 + $1.realizedProfit } ?? 0.00)
        self.tableView.reloadData()
        self.collectionView.reloadData()

    }
    func sendclickPortDetail() {
        NotificationCenter.default.addObserver(self, selector: #selector(receivedPortDetailPageNotificationCenter), name: NSNotification.Name(NotificationCenterPortDetailPage.Clicked.rawValue), object: nil)
    }
    @objc func receivedPortDetailPageNotificationCenter(notifition: Notification) {
//        print("Did Receive sendclickPortDetail")
        // MARK:get Data APi
                  doFecthGetOrderData()
                  doFecthGetOrderData2()
                  doFecthGetOrderData3()
                  doFecthGetOrderData4()
                  doFecthGetOrderData5()
                  self.tableView.reloadData()
                  self.collectionView.reloadData()
    }
    func sendclickFundSale() {
        NotificationCenter.default.addObserver(self, selector: #selector(receivedFundSaleNotificationCenter), name: NSNotification.Name(NotificationCenterFundSale.Clicked.rawValue), object: nil)
    }
        @objc func receivedFundSaleNotificationCenter(notifition: Notification) {
//            print("Did Receive sendclickFundSale")
//    // MARK:get Data APi
            doFecthGetOrderData()
            doFecthGetOrderData2()
            doFecthGetOrderData3()
            doFecthGetOrderData4()
            doFecthGetOrderData5()
            self.tableView.reloadData()
            self.collectionView.reloadData()
            
        }
    func sendclickAddSimulationPort() {
        NotificationCenter.default.addObserver(self, selector: #selector(receivedAddSimulationPortNotificationCenter), name: NSNotification.Name(NotificationCenterAddSimulationPort.Clicked.rawValue), object: nil)
    }

    @objc func receivedAddSimulationPortNotificationCenter(notifition: Notification) {
//                print("Did Receive sendclickAddSimulationPort")
//          // MARK:get Data APi
                doFecthGetOrderData()
                doFecthGetOrderData2()
                doFecthGetOrderData3()
                doFecthGetOrderData4()
                doFecthGetOrderData5()
                self.tableView.reloadData()
                self.collectionView.reloadData()
        }
}
extension SimulationportViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 5
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "SimulationPortViewCell", for: indexPath) as! SimulationPortViewCell
//        let indexcollection = self.indexcollectioncenterred
        if indexPath.row == 0 {
            let data = self.getOrderData?.Data[0].fcode ?? ""
            print("data???", data)
            if data == "" {
                cell.lbcurrency.text = "ไม่มีพอร์ตจำลอง"
                cell.lbport.text = ""
                cell.lbdouble.text = ""
                cell.lbfloat.text = ""
            } else {
                cell.lbcurrency.text = self.sumValue ?? ""
                cell.lbport.text = "พอร์ตจำลอง\((indexPath.row) + 1)"
                cell.lbfloat.text = self.sumunrealizedReturns ?? ""
                let changeString = self.sumunrealizedProfits ?? ""
                let changeDouble = Double(changeString) ?? 0.00
                if changeDouble < 0.00 {
                cell.lbdouble.text = self.sumunrealizedProfits ?? ""
                cell.lbdouble.textColor = .red
    //                self.chage = "\(navlist[countindexnav].change)(\(navlist[countindexnav].changePercent)%)"
                } else {
                    cell.lbdouble.text = "+\(self.sumunrealizedProfits ?? "")"
    //                self.chage = "+\(navlist[countindexnav].change)(+\(navlist[countindexnav].changePercent)%)"
                    cell.lbdouble.textColor = .green
                }
            }
          
//            cell.index = indexPath.row
        } else if indexPath.row  == 1 {
            let data = Int(self.getOrderData2?.Data.count ?? 0)
            if data == 0 {
                cell.lbcurrency.text = "ไม่มีพอร์ตจำลอง"
                cell.lbport.text = ""
                cell.lbdouble.text = ""
                cell.lbfloat.text = ""
            } else {
                cell.lbcurrency.text = self.sumValue2 ?? ""
                cell.lbport.text = "พอร์ตจำลอง\((indexPath.row) + 1)"
                cell.lbfloat.text = self.sumunrealizedReturns2 ?? ""
                let change = Double(self.sumunrealizedProfits2 ?? "") ?? 0
                if change < 0.00 {
                    cell.lbdouble.text = "\(self.sumunrealizedProfits2 ?? "")"
                    cell.lbdouble.textColor = .red
                    //                self.chage = "\(navlist[countindexnav].change)(\(navlist[countindexnav].changePercent)%)"
                } else {
                    cell.lbdouble.text = "+\(self.sumunrealizedProfits2 ?? "")"
                    //                self.chage = "+\(navlist[countindexnav].change)(+\(navlist[countindexnav].changePercent)%)"
                    cell.lbdouble.textColor = .green
                }
                let changeReuturnDouble = Double(self.sumunrealizedReturns2 ?? "") ?? 0.00
                if changeReuturnDouble < 0.00 {
                    cell.lbfloat.text = "\(self.sumunrealizedReturns2 ?? "")%"
                    cell.lbfloat.textColor = .red
    //                self.chage = "\(navlist[countindexnav].change)(\(navlist[countindexnav].changePercent)%)"
                } else {
                    cell.lbfloat.text = "+\(self.sumunrealizedReturns2 ?? "")%"
                    //                self.chage = "+\(navlist[countindexnav].change)(+\(navlist[countindexnav].changePercent)%)"
                    cell.lbfloat.textColor = .green
                }
            }
         
//            cell.index = indexPath.row
        }  else if indexPath.row  == 2 {
            let data = Int(self.getOrderData3?.Data.count ?? 0)
            if data == 0 {
                cell.lbcurrency.text = "ไม่มีพอร์ตจำลอง"
                cell.lbport.text = ""
                cell.lbdouble.text = ""
                cell.lbfloat.text = ""
            }
            else {
                cell.lbcurrency.text = self.sumValue3 ?? ""
                cell.lbport.text = "พอร์ตจำลอง\((indexPath.row) + 1)"
                cell.lbfloat.text = self.sumunrealizedReturns3 ?? ""
                let change = Double(self.sumunrealizedProfits3 ?? "") ?? 0.00
                if change < 0.00 {
                cell.lbdouble.text = "\(self.sumunrealizedProfits3 ?? "")"
                cell.lbdouble.textColor = .red
    //                self.chage = "\(navlist[countindexnav].change)(\(navlist[countindexnav].changePercent)%)"
                } else {
                    cell.lbdouble.text = "+\(self.sumunrealizedProfits3 ?? "")"
    //                self.chage = "+\(navlist[countindexnav].change)(+\(navlist[countindexnav].changePercent)%)"
                    cell.lbdouble.textColor = .green
                }
                let changeReuturnDouble = Double(self.sumunrealizedReturns3 ?? "") ?? 0.00
                if changeReuturnDouble < 0.00 {
                cell.lbfloat.text = "\(self.sumunrealizedReturns3 ?? "")%"
                cell.lbfloat.textColor = .red
    //                self.chage = "\(navlist[countindexnav].change)(\(navlist[countindexnav].changePercent)%)"
                } else {
                    cell.lbfloat.text = "+\(self.sumunrealizedReturns3 ?? "")%"
    //                self.chage = "+\(navlist[countindexnav].change)(+\(navlist[countindexnav].changePercent)%)"
                    cell.lbfloat.textColor = .green
                }
            }
           
//            cell.index = indexPath.row
        }  else if indexPath.row == 3 {
            let data = Int(self.getOrderData4?.Data.count ?? 0)
            if data == 0 {
                cell.lbcurrency.text = "ไม่มีพอร์ตจำลอง"
                cell.lbport.text = ""
                cell.lbdouble.text = ""
                cell.lbfloat.text = ""
            } else {
                cell.lbcurrency.text = self.sumValue4 ?? ""
                cell.lbport.text = "พอร์ตจำลอง\((indexPath.row) + 1)"
                cell.lbfloat.text = self.sumunrealizedReturns4 ?? ""
                let change = Double(self.sumunrealizedProfits4 ?? "") ?? 0.00
                if change < 0.00 {
                cell.lbdouble.text = self.sumunrealizedProfits4 ?? ""
                cell.lbdouble.textColor = .red
    //                self.chage = "\(navlist[countindexnav].change)(\(navlist[countindexnav].changePercent)%)"
                } else {
                    cell.lbdouble.text = "+\(self.sumunrealizedProfits4 ?? "")"
    //                self.chage = "+\(navlist[countindexnav].change)(+\(navlist[countindexnav].changePercent)%)"
                    cell.lbdouble.textColor = .green
                }
                let changeReuturnDouble = Double(self.sumunrealizedReturns4 ?? "") ?? 0.00
                if changeReuturnDouble < 0.00 {
                cell.lbfloat.text = "\(self.sumunrealizedReturns4 ?? "")%"
                cell.lbfloat.textColor = .red
    //                self.chage = "\(navlist[countindexnav].change)(\(navlist[countindexnav].changePercent)%)"
                } else {
                    cell.lbfloat.text = "+\(self.sumunrealizedReturns4 ?? "")%"
    //                self.chage = "+\(navlist[countindexnav].change)(+\(navlist[countindexnav].changePercent)%)"
                    cell.lbfloat.textColor = .green
                }
            }
//            cell.index = indexPath.row
        }  else if indexPath.row == 4 {
            let data = Int(self.getOrderData5?.Data.count ?? 0)
            if data == 0 {
                cell.lbcurrency.text = "ไม่มีพอร์ตจำลอง"
                cell.lbport.text = ""
                cell.lbdouble.text = ""
                cell.lbfloat.text = ""
            } else {
                cell.lbcurrency.text = self.sumValue5 ?? ""
                cell.lbport.text = "พอร์ตจำลอง\((indexPath.row) + 1)"
                cell.lbfloat.text = self.sumunrealizedReturns5 ?? ""
                let change = Double(self.sumunrealizedProfits5 ?? "") ?? 0.00
                if change < 0.00 {
                cell.lbdouble.text = self.sumunrealizedProfits5 ?? ""
                cell.lbdouble.textColor = .red
    //                self.chage = "\(navlist[countindexnav].change)(\(navlist[countindexnav].changePercent)%)"
                } else {
                    cell.lbdouble.text = "+\(self.sumunrealizedProfits5 ?? "")"
    //                self.chage = "+\(navlist[countindexnav].change)(+\(navlist[countindexnav].changePercent)%)"
                    cell.lbdouble.textColor = .green
                }
                let changeReuturnDouble = Double(self.sumunrealizedReturns5 ?? "") ?? 0.00
                if changeReuturnDouble < 0.00 {
                cell.lbfloat.text = "\(self.sumunrealizedReturns5 ?? "")%"
                cell.lbfloat.textColor = .red
    //                self.chage = "\(navlist[countindexnav].change)(\(navlist[countindexnav].changePercent)%)"
                } else {
                    cell.lbfloat.text = "+\(self.sumunrealizedReturns5 ?? "")%"
    //                self.chage = "+\(navlist[countindexnav].change)(+\(navlist[countindexnav].changePercent)%)"
                    cell.lbfloat.textColor = .green
                }
            }
//            cell.index = indexPath.row
        }
        return cell
    }

//    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
//        print("Current centered index: \(Int(centeredCollectionViewFlowLayout.currentCenteredPage ?? 0))")
//        self.pageControl.currentPage = Int(centeredCollectionViewFlowLayout.currentCenteredPage  ?? 0)
//        self.collectionView.reloadData()
//    }
//
//    func scrollViewDidEndScrollingAnimation(_ scrollView: UIScrollView) {
//        print("Current centered index: \(Int(centeredCollectionViewFlowLayout.currentCenteredPage ?? 0))")
//      
//    }
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath)  {
        self.indexcollectioncenterred = indexPath.row
//        print("indexcollectioncenterred>>",indexcollectioncenterred ?? 0)
        self.tableView.reloadData()
//        self.collectionView.reloadData()
        pageControl.currentPage = indexPath.row
    }
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let index = indexPath.row
        if index == 0 {
            let unreailizeProfits = self.sumunrealizedProfits ?? ""
            let realizedProfit = self.realizedProfit ?? ""
            let principal = self.principal ?? ""
        router?.goToPortDetail(portNo: indexPath.row, unreailizeProfits: unreailizeProfits, realizedProfit: realizedProfit, principal: principal)
        } else  if index == 1 {
            let unreailizeProfits = self.sumunrealizedProfits2 ?? ""
            let realizedProfit = self.realizedProfit2 ?? ""
            let principal = self.principal2 ?? ""
        router?.goToPortDetail(portNo: indexPath.row, unreailizeProfits: unreailizeProfits, realizedProfit: realizedProfit, principal: principal)
        } else  if index == 2 {
            let unreailizeProfits = self.sumunrealizedProfits3 ?? ""
            let realizedProfit = self.realizedProfit3 ?? ""
            let principal = self.principal3 ?? ""
        router?.goToPortDetail(portNo: indexPath.row, unreailizeProfits: unreailizeProfits, realizedProfit: realizedProfit, principal: principal)
        }else  if index == 3 {
            let unreailizeProfits = self.sumunrealizedProfits4 ?? ""
            let realizedProfit = self.realizedProfit4 ?? ""
            let principal = self.principal4 ?? ""
        router?.goToPortDetail(portNo: indexPath.row, unreailizeProfits: unreailizeProfits, realizedProfit: realizedProfit, principal: principal)
        }else  if index == 4 {
            let unreailizeProfits = self.sumunrealizedProfits5 ?? ""
            let realizedProfit = self.realizedProfit5 ?? ""
            let principal = self.principal5 ?? ""
        router?.goToPortDetail(portNo: indexPath.row, unreailizeProfits: unreailizeProfits, realizedProfit: realizedProfit, principal: principal)
        }

    }
}
extension SimulationportViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let indexcollection = self.indexcollectioncenterred
//        print("indexcollection", indexcollection ?? 0)
        if indexcollection == 0 {
            let count = self.getOrderData?.Data.count ?? 0
            return count
        } else  if indexcollection == 1 {
            let count = self.getOrderData2?.Data.count ?? 0
            return count
        } else  if indexcollection == 2 {
            let count = self.getOrderData3?.Data.count ?? 0
            return count
        } else  if indexcollection == 3 {
            let count = self.getOrderData4?.Data.count ?? 0
            return count
        }else {
            let count = self.getOrderData5?.Data.count ?? 0
            return count
        }
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "FundsViewCell") as! FundsViewCell
        let indexcollection = self.indexcollectioncenterred
        let realm: Realm = try! Realm()
        let result = realm.objects(ReealmFundsListMobile.self)
        let search = Array(result)
        let fundsList = search
        if indexcollection == 0 {
            cell.getOrderData = self.getOrderData?.Data[indexPath.row]
            cell.fundsList = fundsList
            cell.indexcollectioncenterred = indexcollection ?? 0
        } else  if indexcollection == 1 {
            cell.getOrderData2 = self.getOrderData2?.Data[indexPath.row]
            cell.fundsList = fundsList
            cell.indexcollectioncenterred = indexcollection ?? 0
        } else  if indexcollection == 2 {
            cell.getOrderData3 = self.getOrderData3?.Data[indexPath.row]
            cell.fundsList = fundsList
            cell.indexcollectioncenterred = indexcollection ?? 0
          
        } else  if indexcollection == 3 {
            cell.getOrderData4 = self.getOrderData4?.Data[indexPath.row]
            cell.fundsList = fundsList
            cell.indexcollectioncenterred = indexcollection ?? 0

        }else if indexcollection == 4 {
            cell.getOrderData5 = self.getOrderData5?.Data[indexPath.row]
            cell.fundsList = fundsList
            cell.indexcollectioncenterred = indexcollection ?? 0
      
        }
//        print("indexcentered", cell.indexcollectioncenterred)
        
        return cell
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let realm: Realm = try! Realm()
        let result = realm.objects(ReealmFundsListMobile.self)
        let search = Array(result)
        let fundsList = search
        let portNo =  Int(self.indexcollectioncenterred ?? 0) + 1
        if indexcollectioncenterred == 0 {
            router?.sendDatagoToBuyAndSalePreview(fundsList: fundsList, getOrderList: self.getOrderData?.Data[indexPath.row], portNo: portNo)
        } else if indexcollectioncenterred == 1 {
            router?.sendDatagoToBuyAndSalePreview(fundsList: fundsList, getOrderList: self.getOrderData2?.Data[indexPath.row], portNo: portNo)
    } else if indexcollectioncenterred == 2  {
        router?.sendDatagoToBuyAndSalePreview(fundsList: fundsList, getOrderList: self.getOrderData3?.Data[indexPath.row], portNo: portNo)
    }else if indexcollectioncenterred == 3 {
        router?.sendDatagoToBuyAndSalePreview(fundsList: fundsList, getOrderList: self.getOrderData4?.Data[indexPath.row], portNo: portNo)
    } else if indexcollectioncenterred == 4 {
        router?.sendDatagoToBuyAndSalePreview(fundsList: fundsList, getOrderList: self.getOrderData5?.Data[indexPath.row], portNo: portNo)
    }
}


}
